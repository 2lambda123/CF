/**
  \page cfscffrontpageCFS CFDP (CF) Documentation
  <UL>
     <LI> \subpage cfscfintro
     <LI> \subpage cfscfovr
     <LI> \subpage cfscfopr
     <LI> \subpage cfscfcmdspg
     <LI> \subpage cfscftlmpg
     <LI> \subpage cfscfeventspg
     <LI> \subpage cfscfdg
     <LI> \subpage cfscfcfgpg
     <LI> \subpage cfscftbl
     <LI> \subpage cfscfcons
     <LI> \subpage cfscffaqs
  </UL>
**/

/**
 * \page cfscfeventspg CFS CFDP Events
 *
 * \ref cfscfevents
 */

/**
 * \page cfscfcfgpg CFS CFDP Configuration
 *
 * \ref cfscfmissioncfg
 *
 * \ref cfscfplatformcfg
 */

/**
 * \page cfscfcmdspg CFS CFDP Commands
 *
 * \ref cfscfcmdmid
 *
 * \ref cfscfcmdstructs
 *
 * \ref cfscfcmdcodes
 */

/**
 * \page cfscftlmpg CFS CFDP Telemetry
 *
 * \ref cfscftlmmid
 *
 * \ref cfscftlm
 */

/**
  \page cfscfintro CFS CFDP Introduction

  <H1> Scope </H1>

  This document provides a complete specification for the commands and telemetry associated
  with the CFS CFDP (CF) application software.  The document is intended primarily 
  for users of the software (operations personal, test engineers, and maintenance personnel).  
  The deployment guide section, is intended for mission 
  developers when deploying and configuring the CF application software for a mission 
  flight software build environment. 

  \ref cfscfversion

  <H1> Acronyms </H1>

  <TABLE BORDER="1" CELLPADDING="2" WIDTH="60%">
  <TR><TD WIDTH="20%"> <B>Acronym</B> </TD> <TD WIDTH="40%"> <B>Description</B>                       </TD>
  <TR><TD WIDTH="20%"> API     </TD> <TD WIDTH="40%"> Application Programming Interface               </TD>
  <TR><TD WIDTH="20%"> ATP     </TD> <TD WIDTH="40%"> Absolute Time Processor                         </TD>
  <TR><TD WIDTH="20%"> ATS     </TD> <TD WIDTH="40%"> Absolute Time tagged command Sequence           </TD>
  <TR><TD WIDTH="20%"> CCSDS   </TD> <TD WIDTH="40%"> Consultative Committee for Space Data Systems   </TD>
  <TR><TD WIDTH="20%"> C&DH    </TD> <TD WIDTH="40%"> Command and Data Handling                       </TD>
  <TR><TD WIDTH="20%"> CFE     </TD> <TD WIDTH="40%"> Core Flight Executive                           </TD>
  <TR><TD WIDTH="20%"> CFS     </TD> <TD WIDTH="40%"> Core Flight System                              </TD>
  <TR><TD WIDTH="20%"> CI      </TD> <TD WIDTH="40%"> Command Ingest                                  </TD>
  <TR><TD WIDTH="20%"> Cmd     </TD> <TD WIDTH="40%"> Command                                         </TD>
  <TR><TD WIDTH="20%"> CPU     </TD> <TD WIDTH="40%"> Central Processing Unit                         </TD>
  <TR><TD WIDTH="20%"> EDAC    </TD> <TD WIDTH="40%"> Error Detection and Correction                  </TD>
  <TR><TD WIDTH="20%"> FDS     </TD> <TD WIDTH="40%"> Flight Data System                              </TD>
  <TR><TD WIDTH="20%"> FM      </TD> <TD WIDTH="40%"> File Manager                                    </TD>
  <TR><TD WIDTH="20%"> FSW     </TD> <TD WIDTH="40%"> Flight Software                                 </TD>
  <TR><TD WIDTH="20%"> GN&C    </TD> <TD WIDTH="40%"> Guidance Navigation & Control                   </TD>
  <TR><TD WIDTH="20%"> GSFC    </TD> <TD WIDTH="40%"> Goddard Space Flight Center                     </TD>
  <TR><TD WIDTH="20%"> HK      </TD> <TD WIDTH="40%"> Housekeeping                                    </TD>
  <TR><TD WIDTH="20%"> HW, H/W </TD> <TD WIDTH="40%"> Hardware                                        </TD>
  <TR><TD WIDTH="20%"> ICD     </TD> <TD WIDTH="40%"> Interface Control Document                      </TD>
  <TR><TD WIDTH="20%"> ISR     </TD> <TD WIDTH="40%"> Interrupt Service Routine                       </TD>
  <TR><TD WIDTH="20%"> OS      </TD> <TD WIDTH="40%"> Operating System                                </TD>
  <TR><TD WIDTH="20%"> OSAL    </TD> <TD WIDTH="40%"> Operating System Abstraction Layer              </TD>
  <TR><TD WIDTH="20%"> Pkts    </TD> <TD WIDTH="40%"> Packets                                         </TD>
  <TR><TD WIDTH="20%"> RAM     </TD> <TD WIDTH="40%"> Random-Access Memory                            </TD>
  <TR><TD WIDTH="20%"> RTOS    </TD> <TD WIDTH="40%"> Real Time Operating System                      </TD>
  <TR><TD WIDTH="20%"> RTP     </TD> <TD WIDTH="40%"> Relative Time Processor                         </TD>
  <TR><TD WIDTH="20%"> RTS     </TD> <TD WIDTH="40%"> Relative Time tagged command Sequence           </TD>
  <TR><TD WIDTH="20%"> SB      </TD> <TD WIDTH="40%"> Software Bus Service                            </TD>
  <TR><TD WIDTH="20%"> SBC     </TD> <TD WIDTH="40%"> Single Board Computer                           </TD>
  <TR><TD WIDTH="20%"> SC      </TD> <TD WIDTH="40%"> Stored Commands task                            </TD>
  <TR><TD WIDTH="20%"> SW, S/W </TD> <TD WIDTH="40%"> Software                                        </TD>
  <TR><TD WIDTH="20%"> TBD     </TD> <TD WIDTH="40%"> To Be Determined                                </TD>
  <TR><TD WIDTH="20%"> TBL     </TD> <TD WIDTH="40%"> Table                                           </TD>
  <TR><TD WIDTH="20%"> TLM     </TD> <TD WIDTH="40%"> Telemetry                                       </TD>
  <TR><TD WIDTH="20%"> UTC     </TD> <TD WIDTH="40%"> Universal time code                             </TD>
  </TABLE>
**/

/**
  \page cfscfovr CFS CFDP Overview

  CF is a cFS application for providing CFDP (CCSDS File Delivery Protocol) services. 
  Its primary function is to provide file receive and transmit functionality to this 
  protocol. It works by mapping CFDP PDUs on and off cFS's software bus.
  
  <H2> CF Design Overview </H2>
 
  The CFS CFDP application is a CFDP implementation written specifically for CFS.
  The goal was bounded, small,
  time and space efficent implementation of the CFDP features necessary for flight.
  CF implements Class 1 and 2 send and receive, as well as logic to cancel, suspend,
  resume, abandon, freeze, etc.  Messages utilize "zero-copy" software bus buffers.

  Configuration is mainly through the configuration table.

  <H2> Key differences from CF v2.X </H2>

  - There's no more text-based ground commands where strings are sent for commands.
  - There's no more memory pool. Everything is set up with limits both in platform
    config for static memory limits and the configuration table for dynamic timing and functionality limits.
  - Much smaller code footprint. CF 3.0 is light-weight flight-only app. It does not provide any ground engine support.
**/


/**
  \page cfscfopr CFS CFDP Operation

  <H2>Initialization</H2>

  CF initialization is the same for Power On Resets and Processor Resets.
  Standard application initialization activites are performed such as status and
  tracking initialization, message initialization and subscription, table
  initialization and registering with event services.

  <H2>Run Time</H2>

  <H3>Handling of Outgoing Messages</H3>

  The priority of CF's use of available outgoing messages on each wakeup is:

  -# Send any pending message required for RX transaction
  -# Re-send any message required for TX transaction if timer expired (for example,
     send EOF, or re-send EOF if ack timer expired)
  -# Send a filedata PDU in response to a NAK request. Per wakeup, one will be sent
     per each transaction in the TX wait state.
  -# Once all TX wait transactions have processed their needs to send, the currently
     active TX transfer will send new filedata PDUs. It will keep sending them until
     there are no more messages on that wakeup (or the throttling semaphore stops it.)

  <H3>Received messages</H3>

   Operationally, the flow of input packets from ground into CF
   should be throttled at some rate appropriate for ingest. CF
   has a per-channel configuration item for max number of RX messages
   processed per wakeup, and both CF and the ingest app
   need to be able to handle this.

  <H3>Temporary file/directory use</H3>

   Currently the temporary directory is only used to store class 2 RX file data
   in temporary files on a transaction that has not yet received a metadata PDU.  
   When/if the metadata is received for that transaction, OS_mv is used to transition
   the temporary file to the desired destination location.  Note that OS_mv attempts
   a rename first (faster but does not work across file systems), and if that
   fails then attempts a copy/delete (slower).  Due to this the most efficent
   temporary directory configuration is for it to be on the same file system as the
   destination.  Note that currently this only impacts class 2 RX with an out
   of order metadata packet, but there's future work being considered to
   use the temporary location for all receipts with an atomic transfer of the
   file after successful reception and verification (where applicable) of all the
   file data.
**/


/**
  \page cfscfdg CFS CFDP Deployment Guide

  Follow the general guidelines below for platform deployment of the CFDP app.
  
  <H2> Configuration </H2>
  CF uses two sets of configuration parameters: compile-time configurable parameters
  in the cf_platform_cfg.h file and run-time configurable parameters in the cf_def_cfg.c 
  file.  Most parameters are included in the cf_def_cfg.c file for maximum flexibility.

  CF expects to receive a CF_WAKEUP_MID message from the SCH (scheduler) app at a fixed 
  rate. The number of wakeups per second is reflected in the configuration table. This 
  drives CF's timing.

  <H3> Channels </H3>

  CF version 3.0 has a concept of "channels" which have their own
  configuration. The channel configuration is done in the cf_def_cfg and allows
  message IDs for incoming and outgoing PDUs to be unique per channel. Each channel can be
  configured with polling directories as well.

  In CF 3.0 each channel has an upper-bound on its state, and this is part of the
  static memory allocation requirement.

  <H3> Flow Control </H3>

  By default, CF assumes that a per-channel semaphore is provided by the Telemetry Output 
  (TO) application or an equivalent application.  The semaphore name is defined in the
  CF configuration table and must match the name of the semaphore created by TO. If
  TO does not create a semaphore, the semaphore name can be left as an empty string
  in the configuration table indicating that a semaphore should not be used.  If a
  semaphore is expected and not found, the application will terminate during
  initialization.  If no semaphore is used, the outgoing messages per wakeup may
  need to be more limited. It's a valid configuration to have both the semaphore and maximum
  outgoing messages per wakeup as well.

  <H2> Integration </H2>

  <H3> Software Bus </H3>

  Each channel has an input message ID that is subscribed on, and a message ID to publish its messages on.

  <H3> Scheduler </H3>

  CF as a whole expects the CF_WAKEUP_MID message as described earlier at a fixed rate. 
  If the number of wakeups per second is changed in SCH, then the ticks_per_second 
  configuration parameter in the CF configuration table must also be updated.

  <H3> Endianness </H3>

  CF is endian agnostic and no longer requires specific compile time configuration/defines
  to handle different endian systems.

  <H3> Integration with TO </H3>

  TO's pipe needs to be able to receive packets of #CF_MAX_PDU_SIZE
**/

/**
  \page cfscftbl CFS CFDP Table Definitions
  
  CF utilzes a CFS table for run-time configuration defined by #CF_ConfigTable_t.  The channel
  configuration is in #CF_ConfigTable_t.chan which contains a polling element defined by
  #CF_PollDir_t.
**/

/**
  \page cfscfcons CFS CFDP Constraints

  CF is currently limited by the Software Bus performance.  Future work may
  include implementing a point-to-point interface for high speed transfers.
**/

/**
  \page cfscffaqs CFS CFDP Frequently Asked Questions

  No CF specific FAQ's have been identified/documented.
**/
